#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

def prompt_user(message)
  print message
  STDIN.gets.chomp
end

def setup_environment_file
  env_example_path = ".env.example"
  env_path = ".env"

  if File.exist?(env_path)
    puts "✓ .env file already exists"
  elsif File.exist?(env_example_path)
    puts "\n== Setting up environment file =="
    FileUtils.cp env_example_path, env_path
    puts "✓ Created .env file from .env.example"
    puts "ℹ  Please edit .env file to add your actual environment variables"
  else
    puts "⚠  Warning: .env.example file not found"
  end
end

def setup_credentials
  credentials_path = "config/credentials.yml.enc"
  master_key_path = "config/master.key"
  credentials_example_path = "config/credentials.yml.example"

  if File.exist?(credentials_path) && !File.exist?(master_key_path)
    puts "\n== Rails Credentials Setup Required =="
    puts "Found encrypted credentials file but missing master.key"
    puts ""
    puts "Options:"
    puts "1. Provide existing master.key"
    puts "2. Create new credentials file (will delete existing encrypted file)"
    puts "3. Skip for now (you'll need to set this up manually later)"

    choice = prompt_user("Choose option (1/2/3): ")

    case choice
    when "1"
      master_key = prompt_user("Please enter your master.key: ").strip
      if master_key.length == 32 && master_key.match?(/\A[a-f0-9]+\z/)
        File.write(master_key_path, master_key)
        puts "✓ Master key saved successfully"
      else
        puts "⚠  Invalid master.key format. Expected 32 character hex string."
        puts "   You'll need to set this up manually later."
      end
    when "2"
      puts "Creating new credentials file..."
      FileUtils.rm_f(credentials_path)
      FileUtils.rm_f(master_key_path)

      # Create new credentials file
      system("EDITOR='echo' bin/rails credentials:edit")

      if File.exist?(credentials_example_path)
        puts "ℹ  Please edit your credentials using: bin/rails credentials:edit"
        puts "   Use config/credentials.yml.example as a reference"
      end
      puts "✓ New credentials file created"
    when "3"
      puts "⚠  Skipping credentials setup"
      puts "   Run 'bin/rails credentials:edit' manually when ready"
    else
      puts "⚠  Invalid choice. Skipping credentials setup"
    end
  elsif File.exist?(credentials_path) && File.exist?(master_key_path)
    puts "✓ Rails credentials are properly configured"
  elsif !File.exist?(credentials_path)
    puts "\n== Creating Rails credentials =="
    if File.exist?(credentials_example_path)
      puts "ℹ  Creating new credentials file"
      puts "   Use config/credentials.yml.example as a reference"
    end
    # Create new credentials file
    system("EDITOR='echo' bin/rails credentials:edit")
    puts "✓ New credentials file created"
    puts "ℹ  Please edit your credentials using: bin/rails credentials:edit"
  end
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # Install JavaScript dependencies
  system("npm install --check-files")

  # Setup environment file
  setup_environment_file

  # Setup Rails credentials
  setup_credentials

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Setup Complete! =="
  puts ""
  puts "Next steps:"
  puts "1. Edit your .env file to configure environment variables"
  puts "2. Edit Rails credentials with: bin/rails credentials:edit"
  puts "   - Add your Clerk API keys"
  puts "   - Add Postmark API token for production"
  puts "   - See config/credentials.yml.example for reference"
  puts ""

  unless ARGV.include?("--skip-server")
    puts "== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
